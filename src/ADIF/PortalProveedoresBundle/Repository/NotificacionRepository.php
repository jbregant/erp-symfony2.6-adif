<?php

namespace ADIF\PortalProveedoresBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * NotificacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificacionRepository extends EntityRepository
{
	/**
     *
     * @param integer $id
     * @return AllNotificaciones
     */
    public function findNotificaciones($id) {
    	$enviadas = $this->findNotificacionesEnviadas($id);
    	$leidas = $this->findNotificacionesLeidas($id);
    	
    	$total = $enviadas - $leidas;

	    return $this->totalNotificaciones($enviadas, $leidas);
    }

    /**
     *
     * @param integer $id
     * @return AllDetalle
     */
    public function findDetalles($id) {
        
        $sql = 'SELECT nu.id, vup.idUsuario, vup.idProveedor, vup.email, vup.cuit, vup.razonSocial, nu.leido, nu.fecha_hora ';
        $sql .= 'FROM notificacion_usuario nu ';
        $sql .= 'INNER JOIN vista_usuarios_proveedores vup ON (nu.usuario_idusuario = vup.idUsuario AND nu.id_proveedor = vup.idProveedor) ';
        $sql .= 'WHERE nu.notificacion_idnotificacion ='.$id;

        $query = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

        return $query;
    }

    // Funcion que trae el numero de notificaciones enviadas
    public function findNotificacionesEnviadas($id) {

    	$entity = $this->getEntityManager()->getRepository('ADIFPortalProveedoresBundle:NotificacionUsuario');

        $query = $entity->createQueryBuilder('a')
		        ->select('COUNT(a.id)')
		        ->where('a.notificacionIdnotificacion = :id')
		        ->setParameter('id', $id)
		        ->getQuery()->getSingleScalarResult();

	    return (int)$query;
    }

    // Funcion que trae el numero de notificaciones leidas
    public function findNotificacionesLeidas($id) {

    	$entity = $this->getEntityManager()->getRepository('ADIFPortalProveedoresBundle:NotificacionUsuario');

        $query = $entity->createQueryBuilder('b')
		        ->select('COUNT(b.id)')
		        ->where('b.notificacionIdnotificacion = :id AND b.leido = 1') // leido es 1 y no leido
		        ->setParameter('id', $id)
		        ->getQuery()->getSingleScalarResult();

	    return (int)$query;
    }

    // Funcion que resta las notificaciones enviadas y las leidas para sacar el total de las no leidas
    public function totalNotificaciones($enviadas, $leidas) {

    	$total = $enviadas - $leidas;
    	$array = array(
		    "enviadas" => $enviadas,
		    "leidas" => $leidas,
		    "noLeidas" => $total,
		);

	    return $array;
    }

    public function findAllUsuarios() {

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('idUsuario', 'idUsuario');
        $rsm->addScalarResult('idProveedor', 'idProveedor');
        $rsm->addScalarResult('nombre', 'nombre');
        $rsm->addScalarResult('cuit', 'cuit');
        $rsm->addScalarResult('razonSocial', 'razonSocial');
        $rsm->addScalarResult('email', 'email');

        $native_query = $this->getEntityManager()->createNativeQuery('SELECT * FROM vista_usuarios_proveedores', $rsm);
        $result = $native_query->getResult();

        return $result;
    }
}
